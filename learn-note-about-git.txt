Git 的设置
Git 设置文件是 .gitconfig ，全局设置文件在用户主目录下，项目设置文件在项目目录下 
查看 Git 设置信息： git config --list
查看 Git 用户名： git config user.name
查看 Git 设置邮箱： git config user.email
全局设置用户名信息： git config --global user.name "First-name Last-name"
全局设置邮箱信息： git config --global user.email "name@mail.com"
Git 中文显示乱码： 
git config --global core.quotepath false  通过设置 Git 不对 0x80 以上的字符
进行转义解决中文显示乱码


创建版本库：
Git 仓库初始化：git init

添加文件到 Git 仓库：
分两步：
git add <file> 可反复使用，添加多个文件
git commit -m <message> 完成添加 "commit 类似虚拟机的一个快照功能"


版本回退：
随时查看工作区状态：git status
git status 若显示文件被修改过，可用 git diff 查看修改内容

HEAD 指向当前版本，HEAD^ 指向上一个版本，HEAD^^指向上上一个版本，
HEAD~100 指向往上第100个版本
git log 命令告诉提交的历史记录，显示从最近到最远的提交日志,可用于确定回退到哪个版本
git log --pretty=oneline 带参数一行显示提交日志
git reset --hard [commit_id/某个HEAD] 用于切换到某次 commit 的版本
git reflog 查看 HEAD 指向 commit id 的历史变更记录，可用于确定回到未来的哪个版本


工作区和暂存区：
Git 版本控制系统某些概念
工作区（Working Directory）： 电脑里可以看到的目录，比如 learngit 文件夹就是一个工作区
版本库（Repository）： 工作区的名为 .git 的隐藏目录，不作为工作区，属于 Git 的版本库
Git 版本库内有很多内容，最重要的是称为 stage (或者称为 index)的暂存区，还有 Git 为我们
自动创建的第一个分支 master, 以及指向 master 的指针 HEAD
将文件提交到版本库分两步执行：
第一步通过 git add 把文件添加进去， 实际上是将新文件或者已存在文件的修改添加到暂存区
第二部通过 git commit 提交更改，实际上是把暂存区的所有内容提交到当前分支
创建版本库时，Git 自动为我们创建了唯一的一个 master 分支，所以，当前 git commit 就
是往 master 分支上提交更改
简单的理解：需要提交的文件修改通通放到暂存区，然后一次性提交暂存区的所有修改
提交之后，如果没有对工作区进行任何修改，工作区就是“干净”的


管理修改：
Git 比其他的版本控制系统设计的优秀原因？
Git 跟踪并管理的是修改，而非文件
修改：新增一行 或 删除一行 或 更改某行内的某些字符 或 删除了一些字符又增加了一些 
或 创建了一个新文件 或 删除了一个文件
Git 追踪修改，如果每次的修改没有 git add 到暂存区，就不会加入到 commit 中
git diff HEAD -- filename 命令用于查看工作区河版本库里面最新版本的区别 


撤销修改：
git checkout -- filename 丢弃工作区的修改
将文件在工作区的修改全部撤销，存在两种情况：
第一种：文件自从修改后还没有被放到暂存区，撤销修改就回到和版本库一模一样的状态
第二种：文件修改已经添加到暂存区，又做了修改，撤销修改就是回到添加到暂存区后的状态
总之就是让文件回到最近的一次 git commit 或 git add 之后的状态
git checkout -- filename 命令中的 -- 很重要，没有 -- ，就变成了“切换到另一个分支”的命令，
我们在分支管理中会再次遇到 git checkout 命令
git reset HEAD filename 命令可以将暂存区的修改撤掉（unstage），重新放回工作区
git reset 命令既可以回退板板，也可以把暂存区的修改回退到工作区，当我们用 HEAD 时，表示最新版本
总结：
场景1：当改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 git checkout -- filename
场景2：若不仅改乱了工作区某个文件的内容，还添加到了暂存区，想丢弃修改，分两步，第一步用命令 
git reset HEAD filename 回到场景1 ，第二步按场景1操作
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，前提是没有推送到远程库


删除文件：
在Git中，删除文件也是一个修改操作
从来没有被添加到版本库就被删除的文件，是无法恢复的
git rm filename 命令执行后，工作区文件删除，暂存区相应变动，如果执行这个命令之后不想删除了，则要先撤销暂存区的修改
即git reset HEAD filename ,再 git checkout -- filename
先手动删除文件，然后使用 git rm filename 和 git add filename 效果一样

场景1：如果使用 rm filename 删除文件，实际只删除了工作区的文件，若需要恢复，直接使用命令 git checkout -- filename
场景2：如果使用 git rm filename 删除文件，实际不仅删除了工作区内文件，而且添加到了暂存区，若要恢复，需要
先使用 git reset HEAD filename 命令撤销暂存区修改，再使用 git checkout -- filename 命令撤销工作区修改
场景3：如果想彻底将版本库的文件删除，先使用命令 git rm filename，再使用命令 git commit -m "remove filename"


远程仓库
GitHub 提供 Git 仓库托管服务，注册 GitHub 账号，获取免费 Git 远程仓库
本地 Git 仓库和 GitHub 仓库之间的传输通过 SSH 加密
创建 SSH Key ： ssh-keygen -t rsa -C "email@example.com"
将公钥添加到 GitHub
添加远程仓库
在 GitHub 创建一个新的仓库
将本地已有的仓库与 GitHub 新建仓库关联
git remote add origin git@github.com:he-wenlong/learngit.git
本地仓库内容推送的 GitHub 仓库
git push -u origin master

远程仓库名 Git 默认是 origin ，也可修改成其他，origin 显然显示该仓库是远程库
本地仓库的内容推送到远程，用 git push 命令，实际上是把当前分支 master 推送到远程
由于远程仓库是空的，第一次推送 master 分支时，添加 -u 参数，Git 不但会将本地 master 分支
内容推送到远程新的 master 分支，还会将本地的 master 分支和远程的 master 分支关联，在以后
的推送或者拉取时就可以简化命令为 git push origin master

关联远程库，使用命令 git remote add origin git@server-name:path/repo-name.git
关联后，使用命令 git push -u origin master 第一次推送 master 分支的所有内容
此后，每次本地提交后，只要有必要，就可以使用命令 git push origin master 推送最新修改

从远程仓库克隆
上面，现有本地库，后有远程库，再关联远程仓库
从零开发，最好方式先建立远程库，再从远程库克隆
GitHub 创建一个远程库 gitskills，用命令 git clone 克隆一个本地库
git clone git@github.com:he-wenlong/gitskills.git

要克隆一仓库，首先要知道仓库地址，然后使用 git clone 命令克隆
Git 支持多种协议，包括 https，但通过 ssh 支持的原生 git 协议速度最快


分支管理
创建一个自己的分支，其他人看不到这个分支，继续再原来分支上正常工作，我们在自己分支上干活
随时想提交就提交，直到开发完毕，再一次性合并到原来的分支上，这样既安全，又不影响别人的工作
HEAD 严格讲不是指向提交，而是指向 master, master 才是指向提交的，所以，HEAD 指向的就是
当前分支，一开始，master 分支是一条线，Git 用 master 指向最新的提交，再用 HEAD 指向 master，
就能确定当前分支，以及当前分支的提交点
创建与合并分支
查看分支： git branch
创建分支： git branch <name>
切换分支： git checkout <name>
创建+切换分支： git checkout -b <name>
合并某分支到当前分支： git merge <name>
删除分支： git branch -d <name>

解决冲突
当 Git 无法自动合并分支时，就必须首先解决冲突，解决冲突后，再提交，合并完成
解决冲突就是把 Git 合并失败的文件手动编辑为我们希望的内容，再提交
用 git log --graph 命令可以看到分支合并图：
git log --graph --pretty=oneline --abbrev-commit

分支管理策略
master 分支应该非常稳定，仅用来发布新版本，平时不能在上面干活
干活都在 dev 分支上，dev 分支是不稳定的，到某个时候，比如 1.0版本发布时，再把 
dev 分支合并到 master 上，再 master 分支发布 1.0 版本
每个人在 dev 分支上干活，每个人都有自己的分支，时不时往 dev 分支上合并
合并分支时，加上 --no--ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来
曾经做过合并，而 fast-forward 合并就看不出来曾经做过合并
git merge --no-ff -m <message> <branch_name>
合并会创建一个新的 commit 所以加上 -m 参数，把 commit 描述写进去
合并后，我们用 git log 查看分支历史
git log --graph --pretty=oneline --abbrev-commit

Bug 分支
软件开发中，bug 经常出现，有了 bug 就需要修复，Git 中，每个 bug 可以通过一个新的临时分支来修复，
修复后，合并分支，然后将临时分支删除
修复 bug 时，我们会通过创建新的 bug 分支进行修复，然后合并，最后删除
当手头上的工作没有完成时，先把工作现场 git stash 一下，然后去修复 bug,修复后，再 git stash pop,
回到工作现场

Feature 分支
软件开发中，添加一个新功能，不能因为一些实验性质的代码，把住分支搞乱，所以，每添加一个
新功能，最好新建一个 feature 分支，在上面开发，完成后，合并，最后，删除该 feature 分支

开发一个新 feature ，最好新建一个分支
如果要丢弃一个没有被合并过的分支，可以通过 git branch -D <branch-name> 强行删除

多人协作
当从远程仓库克隆时，实际上是 Git 自动将本地的 master 分支和远程的 master 分支对于起来了，
并且，远程仓库的默认名称是 origin。
要查看远程库的信息，用 git remote ，或用 git remote -v 显示更详细的信息，抓取和推送的 origin 的地址
如果没有推送权限，就看不到 push 地址

推送分支
推送分支，是将该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git 就会把该分支推送到远程库对应的远程分支上 git push origin master
如果要推送其他分支，比如dev,就改成 git push origin dev
本地分支远程推送原则，哪些分支需要推送，哪些不需要
master 分支是主分支，因此要时刻与远程同步
dev 分支是开发分支，团队的所有成员都需要在上面工作，所以也需要与远程同步
bug 分支只用于在本地修复bug ，没必要推到远程，除非boss想看每周到底修复了几个bug
feature 分支是否推送到远程，取决于你是否和你的小伙伴合作在上面开发
总之，Git中，分支完全可以在本地自己藏着玩，是否推送，视情形而定

抓取分支
多人协作，大家都会往 master 和 dev 分支上推送各自的修改
当远程库clone时，默认情况下，只能看到本地的 master 分支，若要在 dev 分支上开发，就必须创建
远程 origin 的 dev 分支到本地，命令是 git checkout -b dev origin/dev
然后在 dev 上继续修改，时不时将 dev 分支 push 到远程
当小伙伴已经向 origin/dev 分支推送了他的提交，碰巧你也对同样的文件作了修改，并试图推送：
git push origin dev 推送失败，因为小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很
简单， Git 已经提示， 先用 git pull 把最新的提交从 origin/dev 抓取下来，然后在本地合并，
解决冲突，再推送 ； git pull 也失败了，原因是没有知ID那个本地 dev 分支和远程 origin/dev 分支
的链接，根据提示，设置 dev 和 origin/dev 的链接： git branch --set-upstream-to=origin/<branch> dev
在 pull 这时 git pull 成功，但是合并有冲突，需要手动解决，解决办法和分支管理中的解决冲突完全相同，解决后，
再提交，再push
多人协作工作模式
首先，试图用 git push origin <branch-name> 推送自己的修改
如果推送失败，则因为远程分支比你的本地更新，需要先用 git pull 试图合并
如果合并有冲突，则解决冲突，并在本地提交
没有冲突或者解决掉冲突后，再用 git push origin  <branch-name> 推送就能成功

如果 git pull 提示 no tracking information, 则说明本地分支和远程分支的链接关系没有创建，
用命令  git branch --set-upstream-to=origin/<branch> dev
以上是多人协作的工作模式，熟悉后便非常简单

总结
查看远程库信息，使用 git remote -v 
本地新建的分支如果不推送到远程，对其他人就是不可见的
本地推送分支，使用 git push origin branch-name, 如果推送失败，先用 git pull抓取远程的新提交
在本地创建和远程分支对应的分支，使用 git checkout -b branch-name origin/branch-name,本地和
远程分支的名称最好一致
建立本地分支和远程分支的关联，使用 git branch --set-upstream-to=origin/<branch> lo-branch-name
从远程抓取分支，使用 git pull，如果有冲突，要先处理冲突

git log 退出方式 ：英文输入法状态下，按 q 键

Rebase（查阅其他资料，暂时没理解）
rebase 操作可以把本地未 push 的分叉提交历史整理成直线
rebase 的目的是使我们在查看历史提交的变化是更容易，因为分叉的提交需要三方比对

标签管理
发布一个版本，通常先在版本库中打一个标签（tag），就唯一确定了打标签时刻的版本。将来无论什么时候，
取某个标签的版本，就是把那个打标签的时刻的历史版本取出。所以，标签也是版本库的一个快照

Git 的标签虽然时版本库的快照，但其实它是指向某个 commit 的指针（跟分支很像，但是分支可以移动，
标签不能移动），所以创建和删除标签都可以瞬间完成
Git 有 commit ，为何还要引入 tag:
tag 是一个让人容易记住的有意义的名字，与某个 commit 绑在一起

创建标签
命令 git tag <tag-name> 用于新建一个标签，默认为 HEAD ，也可以指定一个 commit id 
命令 git tag -a <tag -name> -m "blablabla..." 新建标签并指定标签信息
命令 git tag 查看所有标签

在 Git 中打标签，先切换到需要打标签的分支上，然后 敲命令 git tag <tag-name> 就可以打一个新标签
标签默认打在最新提交的 commit 上，有时候，如果忘记打标签，可以找到历史提交的 commit id 
(git reflog / git log) ,然后打上标签 ： 
git log --pretty=oneline --abbrev-commit
git tag <tag-name> <commit-id>

git tag 显示所有标签
git show <tag-name> 显示某个标签的信息
git tag -a <tag-name> -m "blablabla..."  新建标签并指定标签的说明文字
git show <tag-name> 显示这个标签的信息并显示说明信息
标签总是和某个 commit 挂钩，如果这个 commit 既出现在 master 分支，又出现在 dev 分支，那么在
这两个分支上都可以看到这个标签

操作标签
命令 git push origin <tag-name> 推送一个本地的标签
命令 git push origin --tags 推送全部未推送过的本地标签
命令 git tag -d <tag-name> 删除一个本地标签
命令 git push origin :refs/tags/<tag-name> 删除一个远程标签

推送某个标签到远程：git push origin <tag-name>
一次性推送全部尚未推送到远程的本地标签：git push origin --tags

标签打错可以删除 ：git tag -d v0.0
因为创建的标签都值存储在本地，不会自动推送到远程，所以打错的标签可以在本地安全删除
如果标签已经推送到远程，要删除远程标签分两步，
先本地删除：git tag -d v0.0
然后远程删除：git push origin :refs/tags/v0.0
是否从远程库删除了标签 可以登录 GitHub 查看

使用 GitHub
在 GitHub 上可以任意 Fork 开源仓库
自己拥有 Fork 后的仓库的读写权限
通过 pull request 给官方仓库贡献代码

如果想 推送修改给官方 需要先 Fork ，然后修改，最后 pull request
直接 git clone 没有 推送权限，只能本地自己玩 
